["^ ","~:resource-id",["~:shadow.build.classpath/resource","goog/dom/xml.js"],"~:js","goog.provide(\"goog.dom.xml\");\ngoog.require(\"goog.dom\");\ngoog.require(\"goog.dom.NodeType\");\ngoog.require(\"goog.dom.safe\");\ngoog.require(\"goog.html.legacyconversions\");\ngoog.require(\"goog.userAgent\");\ngoog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;\ngoog.dom.xml.MAX_ELEMENT_DEPTH = 256;\ngoog.dom.xml.hasActiveXObjectSupport_ = function() {\n  if (!goog.userAgent.IE) {\n    return false;\n  }\n  try {\n    new ActiveXObject(\"MSXML2.DOMDocument\");\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\ngoog.dom.xml.ACTIVEX_SUPPORT = goog.userAgent.IE && goog.dom.xml.hasActiveXObjectSupport_();\ngoog.dom.xml.createDocument = function(opt_rootTagName, opt_namespaceUri, opt_preferActiveX) {\n  if (opt_namespaceUri && !opt_rootTagName) {\n    throw new Error(\"Can't create document with namespace and no root tag\");\n  }\n  if (document.implementation && document.implementation.createDocument && !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {\n    return document.implementation.createDocument(opt_namespaceUri || \"\", opt_rootTagName || \"\", null);\n  } else if (goog.dom.xml.ACTIVEX_SUPPORT) {\n    var doc = goog.dom.xml.createMsXmlDocument_();\n    if (doc) {\n      if (opt_rootTagName) {\n        doc.appendChild(doc.createNode(goog.dom.NodeType.ELEMENT, opt_rootTagName, opt_namespaceUri || \"\"));\n      }\n      return doc;\n    }\n  }\n  throw new Error(\"Your browser does not support creating new documents\");\n};\ngoog.dom.xml.loadXml = function(xml, opt_preferActiveX) {\n  if (typeof DOMParser != \"undefined\" && !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {\n    return goog.dom.safe.parseFromString(new DOMParser(), goog.html.legacyconversions.safeHtmlFromString(xml), \"application/xml\");\n  } else if (goog.dom.xml.ACTIVEX_SUPPORT) {\n    var doc = goog.dom.xml.createMsXmlDocument_();\n    doc.loadXML(xml);\n    return doc;\n  }\n  throw new Error(\"Your browser does not support loading xml documents\");\n};\ngoog.dom.xml.serialize = function(xml) {\n  var text = xml.xml;\n  if (text) {\n    return text;\n  }\n  if (typeof XMLSerializer != \"undefined\") {\n    return (new XMLSerializer()).serializeToString(xml);\n  }\n  throw new Error(\"Your browser does not support serializing XML documents\");\n};\ngoog.dom.xml.selectSingleNode = function(node, path) {\n  if (typeof node.selectSingleNode != \"undefined\") {\n    var doc = goog.dom.getOwnerDocument(node);\n    if (typeof doc.setProperty != \"undefined\") {\n      doc.setProperty(\"SelectionLanguage\", \"XPath\");\n    }\n    return node.selectSingleNode(path);\n  } else if (document.implementation.hasFeature(\"XPath\", \"3.0\")) {\n    var doc = goog.dom.getOwnerDocument(node);\n    var resolver = doc.createNSResolver(doc.documentElement);\n    var result = doc.evaluate(path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n    return result.singleNodeValue;\n  }\n  return null;\n};\ngoog.dom.xml.selectNodes = function(node, path) {\n  if (typeof node.selectNodes != \"undefined\") {\n    var doc = goog.dom.getOwnerDocument(node);\n    if (typeof doc.setProperty != \"undefined\") {\n      doc.setProperty(\"SelectionLanguage\", \"XPath\");\n    }\n    return node.selectNodes(path);\n  } else if (document.implementation.hasFeature(\"XPath\", \"3.0\")) {\n    var doc = goog.dom.getOwnerDocument(node);\n    var resolver = doc.createNSResolver(doc.documentElement);\n    var nodes = doc.evaluate(path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n    var results = [];\n    var count = nodes.snapshotLength;\n    for (var i = 0; i < count; i++) {\n      results.push(nodes.snapshotItem(i));\n    }\n    return results;\n  } else {\n    return [];\n  }\n};\ngoog.dom.xml.setAttributes = function(element, attributes) {\n  for (var key in attributes) {\n    if (attributes.hasOwnProperty(key)) {\n      element.setAttribute(key, attributes[key]);\n    }\n  }\n};\ngoog.dom.xml.createMsXmlDocument_ = function() {\n  var doc = new ActiveXObject(\"MSXML2.DOMDocument\");\n  if (doc) {\n    doc.resolveExternals = false;\n    doc.validateOnParse = false;\n    try {\n      doc.setProperty(\"ProhibitDTD\", true);\n      doc.setProperty(\"MaxXMLSize\", goog.dom.xml.MAX_XML_SIZE_KB);\n      doc.setProperty(\"MaxElementDepth\", goog.dom.xml.MAX_ELEMENT_DEPTH);\n    } catch (e) {\n    }\n  }\n  return doc;\n};\n","~:source","/**\n * @license\n * Copyright The Closure Library Authors.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview\n * XML utilities.\n */\n\ngoog.provide('goog.dom.xml');\n\ngoog.require('goog.dom');\ngoog.require('goog.dom.NodeType');\ngoog.require('goog.dom.safe');\ngoog.require('goog.html.legacyconversions');\ngoog.require('goog.userAgent');\n\n\n/**\n * Max XML size for MSXML2.  Used to prevent potential DoS attacks.\n * @type {number}\n */\ngoog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;  // In kB\n\n\n/**\n * Max XML size for MSXML2.  Used to prevent potential DoS attacks.\n * @type {number}\n */\ngoog.dom.xml.MAX_ELEMENT_DEPTH = 256;  // Same default as MSXML6.\n\n\n/**\n * Check for ActiveXObject support by the browser.\n * @return {boolean} true if browser has ActiveXObject support.\n * @private\n */\ngoog.dom.xml.hasActiveXObjectSupport_ = function() {\n  'use strict';\n  if (!goog.userAgent.IE) {\n    // Avoid raising useless exception in case code is not compiled\n    // and browser is not MSIE.\n    return false;\n  }\n  try {\n    // Due to lot of changes in IE 9, 10 & 11 behaviour and ActiveX being\n    // totally disableable using MSIE's security level, trying to create the\n    // ActiveXOjbect is a lot more reliable than testing for the existence of\n    // window.ActiveXObject\n    new ActiveXObject('MSXML2.DOMDocument');\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n\n/**\n * True if browser has ActiveXObject support.\n * Possible override if this test become wrong in coming IE versions.\n * @type {boolean}\n */\ngoog.dom.xml.ACTIVEX_SUPPORT =\n    goog.userAgent.IE && goog.dom.xml.hasActiveXObjectSupport_();\n\n\n/**\n * Creates an XML document appropriate for the current JS runtime\n * @param {string=} opt_rootTagName The root tag name.\n * @param {string=} opt_namespaceUri Namespace URI of the document element.\n * @param {boolean=} opt_preferActiveX Whether to default to ActiveXObject to\n * create Document in IE. Use this if you need xpath support in IE (e.g.,\n * selectSingleNode or selectNodes), but be aware that the ActiveXObject does\n * not support various DOM-specific Document methods and attributes.\n * @return {Document} The new document.\n * @throws {Error} if browser does not support creating new documents or\n * namespace is provided without a root tag name.\n */\ngoog.dom.xml.createDocument = function(\n    opt_rootTagName, opt_namespaceUri, opt_preferActiveX) {\n  'use strict';\n  if (opt_namespaceUri && !opt_rootTagName) {\n    throw new Error('Can\\'t create document with namespace and no root tag');\n  }\n  // If document.implementation.createDocument is available and they haven't\n  // explicitly opted to use ActiveXObject when possible.\n  if (document.implementation && document.implementation.createDocument &&\n      !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {\n    return document.implementation.createDocument(\n        opt_namespaceUri || '', opt_rootTagName || '', null);\n  } else if (goog.dom.xml.ACTIVEX_SUPPORT) {\n    var doc = goog.dom.xml.createMsXmlDocument_();\n    if (doc) {\n      if (opt_rootTagName) {\n        doc.appendChild(\n            /** @type {!Node} */ (doc.createNode(\n                goog.dom.NodeType.ELEMENT, opt_rootTagName,\n                opt_namespaceUri || '')));\n      }\n      return doc;\n    }\n  }\n  throw new Error('Your browser does not support creating new documents');\n};\n\n\n/**\n * Creates an XML document from a string\n * @param {string} xml The text.\n * @param {boolean=} opt_preferActiveX Whether to default to ActiveXObject to\n * create Document in IE. Use this if you need xpath support in IE (e.g.,\n * selectSingleNode or selectNodes), but be aware that the ActiveXObject does\n * not support various DOM-specific Document methods and attributes.\n * @return {Document} XML document from the text.\n * @throws {Error} if browser does not support loading XML documents.\n */\ngoog.dom.xml.loadXml = function(xml, opt_preferActiveX) {\n  'use strict';\n  if (typeof DOMParser != 'undefined' &&\n      !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {\n    return goog.dom.safe.parseFromString(\n        new DOMParser(), goog.html.legacyconversions.safeHtmlFromString(xml),\n        'application/xml');\n  } else if (goog.dom.xml.ACTIVEX_SUPPORT) {\n    var doc = goog.dom.xml.createMsXmlDocument_();\n    doc.loadXML(xml);\n    return doc;\n  }\n  throw new Error('Your browser does not support loading xml documents');\n};\n\n\n/**\n * Serializes an XML document or subtree to string.\n * @param {Document|Element} xml The document or the root node of the subtree.\n * @return {string} The serialized XML.\n * @throws {Error} if browser does not support XML serialization.\n */\ngoog.dom.xml.serialize = function(xml) {\n  'use strict';\n  // Compatible with IE/ActiveXObject.\n  var text = xml.xml;\n  if (text) {\n    return text;\n  }\n  // Compatible with Firefox, Opera and WebKit.\n  if (typeof XMLSerializer != 'undefined') {\n    return new XMLSerializer().serializeToString(xml);\n  }\n  throw new Error('Your browser does not support serializing XML documents');\n};\n\n\n/**\n * Selects a single node using an Xpath expression and a root node\n * @param {Node} node The root node.\n * @param {string} path Xpath selector.\n * @return {Node} The selected node, or null if no matching node.\n */\ngoog.dom.xml.selectSingleNode = function(node, path) {\n  'use strict';\n  if (typeof node.selectSingleNode != 'undefined') {\n    var doc = goog.dom.getOwnerDocument(node);\n    if (typeof doc.setProperty != 'undefined') {\n      doc.setProperty('SelectionLanguage', 'XPath');\n    }\n    return node.selectSingleNode(path);\n  } else if (document.implementation.hasFeature('XPath', '3.0')) {\n    var doc = goog.dom.getOwnerDocument(node);\n    var resolver = doc.createNSResolver(doc.documentElement);\n    var result = doc.evaluate(\n        path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\n    return result.singleNodeValue;\n  }\n  // This browser does not support xpath for the given node. If IE, ensure XML\n  // Document was created using ActiveXObject\n  // TODO(joeltine): This should throw instead of return null.\n  return null;\n};\n\n\n/**\n * Selects multiple nodes using an Xpath expression and a root node\n * @param {Node} node The root node.\n * @param {string} path Xpath selector.\n * @return {(!NodeList<!Node>|!Array<!Node>)} The selected nodes, or empty array\n *     if no matching nodes.\n */\ngoog.dom.xml.selectNodes = function(node, path) {\n  'use strict';\n  if (typeof node.selectNodes != 'undefined') {\n    var doc = goog.dom.getOwnerDocument(node);\n    if (typeof doc.setProperty != 'undefined') {\n      doc.setProperty('SelectionLanguage', 'XPath');\n    }\n    return node.selectNodes(path);\n  } else if (document.implementation.hasFeature('XPath', '3.0')) {\n    var doc = goog.dom.getOwnerDocument(node);\n    var resolver = doc.createNSResolver(doc.documentElement);\n    var nodes = doc.evaluate(\n        path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\n    var results = [];\n    var count = nodes.snapshotLength;\n    for (var i = 0; i < count; i++) {\n      results.push(nodes.snapshotItem(i));\n    }\n    return results;\n  } else {\n    // This browser does not support xpath for the given node. If IE, ensure XML\n    // Document was created using ActiveXObject.\n    // TODO(joeltine): This should throw instead of return empty array.\n    return [];\n  }\n};\n\n\n/**\n * Sets multiple attributes on an element. Differs from goog.dom.setProperties\n * in that it exclusively uses the element's setAttributes method. Use this\n * when you need to ensure that the exact property is available as an attribute\n * and can be read later by the native getAttribute method.\n * @param {!Element} element XML or DOM element to set attributes on.\n * @param {!Object<string, string>} attributes Map of property:value pairs.\n */\ngoog.dom.xml.setAttributes = function(element, attributes) {\n  'use strict';\n  for (var key in attributes) {\n    if (attributes.hasOwnProperty(key)) {\n      element.setAttribute(key, attributes[key]);\n    }\n  }\n};\n\n\n/**\n * Creates an instance of the MSXML2.DOMDocument.\n * @return {!XMLDOMDocument} The new document.\n * @private\n */\ngoog.dom.xml.createMsXmlDocument_ = function() {\n  'use strict';\n  var doc = new ActiveXObject('MSXML2.DOMDocument');\n  if (doc) {\n    // Prevent potential vulnerabilities exposed by MSXML2, see\n    // http://b/1707300 and http://go/xxe-attacks for details.\n    doc.resolveExternals = false;\n    doc.validateOnParse = false;\n    // Add a try catch block because accessing these properties will throw an\n    // error on unsupported MSXML versions. This affects Windows machines\n    // running IE6 or IE7 that are on XP SP2 or earlier without MSXML updates.\n    // See http://msdn.microsoft.com/en-us/library/ms766391(VS.85).aspx for\n    // specific details on which MSXML versions support these properties.\n    try {\n      doc.setProperty('ProhibitDTD', true);\n      doc.setProperty('MaxXMLSize', goog.dom.xml.MAX_XML_SIZE_KB);\n      doc.setProperty('MaxElementDepth', goog.dom.xml.MAX_ELEMENT_DEPTH);\n    } catch (e) {\n      // No-op.\n    }\n  }\n  return doc;\n};\n","~:compiled-at",1670897019799,"~:source-map-json","{\n\"version\":3,\n\"file\":\"goog.dom.xml.js\",\n\"lineCount\":115,\n\"mappings\":\"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\",\n\"sources\":[\"goog/dom/xml.js\"],\n\"sourcesContent\":[\"/**\\n * @license\\n * Copyright The Closure Library Authors.\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n/**\\n * @fileoverview\\n * XML utilities.\\n */\\n\\ngoog.provide('goog.dom.xml');\\n\\ngoog.require('goog.dom');\\ngoog.require('goog.dom.NodeType');\\ngoog.require('goog.dom.safe');\\ngoog.require('goog.html.legacyconversions');\\ngoog.require('goog.userAgent');\\n\\n\\n/**\\n * Max XML size for MSXML2.  Used to prevent potential DoS attacks.\\n * @type {number}\\n */\\ngoog.dom.xml.MAX_XML_SIZE_KB = 2 * 1024;  // In kB\\n\\n\\n/**\\n * Max XML size for MSXML2.  Used to prevent potential DoS attacks.\\n * @type {number}\\n */\\ngoog.dom.xml.MAX_ELEMENT_DEPTH = 256;  // Same default as MSXML6.\\n\\n\\n/**\\n * Check for ActiveXObject support by the browser.\\n * @return {boolean} true if browser has ActiveXObject support.\\n * @private\\n */\\ngoog.dom.xml.hasActiveXObjectSupport_ = function() {\\n  'use strict';\\n  if (!goog.userAgent.IE) {\\n    // Avoid raising useless exception in case code is not compiled\\n    // and browser is not MSIE.\\n    return false;\\n  }\\n  try {\\n    // Due to lot of changes in IE 9, 10 & 11 behaviour and ActiveX being\\n    // totally disableable using MSIE's security level, trying to create the\\n    // ActiveXOjbect is a lot more reliable than testing for the existence of\\n    // window.ActiveXObject\\n    new ActiveXObject('MSXML2.DOMDocument');\\n    return true;\\n  } catch (e) {\\n    return false;\\n  }\\n};\\n\\n\\n/**\\n * True if browser has ActiveXObject support.\\n * Possible override if this test become wrong in coming IE versions.\\n * @type {boolean}\\n */\\ngoog.dom.xml.ACTIVEX_SUPPORT =\\n    goog.userAgent.IE && goog.dom.xml.hasActiveXObjectSupport_();\\n\\n\\n/**\\n * Creates an XML document appropriate for the current JS runtime\\n * @param {string=} opt_rootTagName The root tag name.\\n * @param {string=} opt_namespaceUri Namespace URI of the document element.\\n * @param {boolean=} opt_preferActiveX Whether to default to ActiveXObject to\\n * create Document in IE. Use this if you need xpath support in IE (e.g.,\\n * selectSingleNode or selectNodes), but be aware that the ActiveXObject does\\n * not support various DOM-specific Document methods and attributes.\\n * @return {Document} The new document.\\n * @throws {Error} if browser does not support creating new documents or\\n * namespace is provided without a root tag name.\\n */\\ngoog.dom.xml.createDocument = function(\\n    opt_rootTagName, opt_namespaceUri, opt_preferActiveX) {\\n  'use strict';\\n  if (opt_namespaceUri && !opt_rootTagName) {\\n    throw new Error('Can\\\\'t create document with namespace and no root tag');\\n  }\\n  // If document.implementation.createDocument is available and they haven't\\n  // explicitly opted to use ActiveXObject when possible.\\n  if (document.implementation && document.implementation.createDocument &&\\n      !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {\\n    return document.implementation.createDocument(\\n        opt_namespaceUri || '', opt_rootTagName || '', null);\\n  } else if (goog.dom.xml.ACTIVEX_SUPPORT) {\\n    var doc = goog.dom.xml.createMsXmlDocument_();\\n    if (doc) {\\n      if (opt_rootTagName) {\\n        doc.appendChild(\\n            /** @type {!Node} */ (doc.createNode(\\n                goog.dom.NodeType.ELEMENT, opt_rootTagName,\\n                opt_namespaceUri || '')));\\n      }\\n      return doc;\\n    }\\n  }\\n  throw new Error('Your browser does not support creating new documents');\\n};\\n\\n\\n/**\\n * Creates an XML document from a string\\n * @param {string} xml The text.\\n * @param {boolean=} opt_preferActiveX Whether to default to ActiveXObject to\\n * create Document in IE. Use this if you need xpath support in IE (e.g.,\\n * selectSingleNode or selectNodes), but be aware that the ActiveXObject does\\n * not support various DOM-specific Document methods and attributes.\\n * @return {Document} XML document from the text.\\n * @throws {Error} if browser does not support loading XML documents.\\n */\\ngoog.dom.xml.loadXml = function(xml, opt_preferActiveX) {\\n  'use strict';\\n  if (typeof DOMParser != 'undefined' &&\\n      !(goog.dom.xml.ACTIVEX_SUPPORT && opt_preferActiveX)) {\\n    return goog.dom.safe.parseFromString(\\n        new DOMParser(), goog.html.legacyconversions.safeHtmlFromString(xml),\\n        'application/xml');\\n  } else if (goog.dom.xml.ACTIVEX_SUPPORT) {\\n    var doc = goog.dom.xml.createMsXmlDocument_();\\n    doc.loadXML(xml);\\n    return doc;\\n  }\\n  throw new Error('Your browser does not support loading xml documents');\\n};\\n\\n\\n/**\\n * Serializes an XML document or subtree to string.\\n * @param {Document|Element} xml The document or the root node of the subtree.\\n * @return {string} The serialized XML.\\n * @throws {Error} if browser does not support XML serialization.\\n */\\ngoog.dom.xml.serialize = function(xml) {\\n  'use strict';\\n  // Compatible with IE/ActiveXObject.\\n  var text = xml.xml;\\n  if (text) {\\n    return text;\\n  }\\n  // Compatible with Firefox, Opera and WebKit.\\n  if (typeof XMLSerializer != 'undefined') {\\n    return new XMLSerializer().serializeToString(xml);\\n  }\\n  throw new Error('Your browser does not support serializing XML documents');\\n};\\n\\n\\n/**\\n * Selects a single node using an Xpath expression and a root node\\n * @param {Node} node The root node.\\n * @param {string} path Xpath selector.\\n * @return {Node} The selected node, or null if no matching node.\\n */\\ngoog.dom.xml.selectSingleNode = function(node, path) {\\n  'use strict';\\n  if (typeof node.selectSingleNode != 'undefined') {\\n    var doc = goog.dom.getOwnerDocument(node);\\n    if (typeof doc.setProperty != 'undefined') {\\n      doc.setProperty('SelectionLanguage', 'XPath');\\n    }\\n    return node.selectSingleNode(path);\\n  } else if (document.implementation.hasFeature('XPath', '3.0')) {\\n    var doc = goog.dom.getOwnerDocument(node);\\n    var resolver = doc.createNSResolver(doc.documentElement);\\n    var result = doc.evaluate(\\n        path, node, resolver, XPathResult.FIRST_ORDERED_NODE_TYPE, null);\\n    return result.singleNodeValue;\\n  }\\n  // This browser does not support xpath for the given node. If IE, ensure XML\\n  // Document was created using ActiveXObject\\n  // TODO(joeltine): This should throw instead of return null.\\n  return null;\\n};\\n\\n\\n/**\\n * Selects multiple nodes using an Xpath expression and a root node\\n * @param {Node} node The root node.\\n * @param {string} path Xpath selector.\\n * @return {(!NodeList<!Node>|!Array<!Node>)} The selected nodes, or empty array\\n *     if no matching nodes.\\n */\\ngoog.dom.xml.selectNodes = function(node, path) {\\n  'use strict';\\n  if (typeof node.selectNodes != 'undefined') {\\n    var doc = goog.dom.getOwnerDocument(node);\\n    if (typeof doc.setProperty != 'undefined') {\\n      doc.setProperty('SelectionLanguage', 'XPath');\\n    }\\n    return node.selectNodes(path);\\n  } else if (document.implementation.hasFeature('XPath', '3.0')) {\\n    var doc = goog.dom.getOwnerDocument(node);\\n    var resolver = doc.createNSResolver(doc.documentElement);\\n    var nodes = doc.evaluate(\\n        path, node, resolver, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);\\n    var results = [];\\n    var count = nodes.snapshotLength;\\n    for (var i = 0; i < count; i++) {\\n      results.push(nodes.snapshotItem(i));\\n    }\\n    return results;\\n  } else {\\n    // This browser does not support xpath for the given node. If IE, ensure XML\\n    // Document was created using ActiveXObject.\\n    // TODO(joeltine): This should throw instead of return empty array.\\n    return [];\\n  }\\n};\\n\\n\\n/**\\n * Sets multiple attributes on an element. Differs from goog.dom.setProperties\\n * in that it exclusively uses the element's setAttributes method. Use this\\n * when you need to ensure that the exact property is available as an attribute\\n * and can be read later by the native getAttribute method.\\n * @param {!Element} element XML or DOM element to set attributes on.\\n * @param {!Object<string, string>} attributes Map of property:value pairs.\\n */\\ngoog.dom.xml.setAttributes = function(element, attributes) {\\n  'use strict';\\n  for (var key in attributes) {\\n    if (attributes.hasOwnProperty(key)) {\\n      element.setAttribute(key, attributes[key]);\\n    }\\n  }\\n};\\n\\n\\n/**\\n * Creates an instance of the MSXML2.DOMDocument.\\n * @return {!XMLDOMDocument} The new document.\\n * @private\\n */\\ngoog.dom.xml.createMsXmlDocument_ = function() {\\n  'use strict';\\n  var doc = new ActiveXObject('MSXML2.DOMDocument');\\n  if (doc) {\\n    // Prevent potential vulnerabilities exposed by MSXML2, see\\n    // http://b/1707300 and http://go/xxe-attacks for details.\\n    doc.resolveExternals = false;\\n    doc.validateOnParse = false;\\n    // Add a try catch block because accessing these properties will throw an\\n    // error on unsupported MSXML versions. This affects Windows machines\\n    // running IE6 or IE7 that are on XP SP2 or earlier without MSXML updates.\\n    // See http://msdn.microsoft.com/en-us/library/ms766391(VS.85).aspx for\\n    // specific details on which MSXML versions support these properties.\\n    try {\\n      doc.setProperty('ProhibitDTD', true);\\n      doc.setProperty('MaxXMLSize', goog.dom.xml.MAX_XML_SIZE_KB);\\n      doc.setProperty('MaxElementDepth', goog.dom.xml.MAX_ELEMENT_DEPTH);\\n    } catch (e) {\\n      // No-op.\\n    }\\n  }\\n  return doc;\\n};\\n\"],\n\"names\":[\"goog\",\"provide\",\"require\",\"dom\",\"xml\",\"MAX_XML_SIZE_KB\",\"MAX_ELEMENT_DEPTH\",\"hasActiveXObjectSupport_\",\"goog.dom.xml.hasActiveXObjectSupport_\",\"userAgent\",\"IE\",\"ActiveXObject\",\"e\",\"ACTIVEX_SUPPORT\",\"createDocument\",\"goog.dom.xml.createDocument\",\"opt_rootTagName\",\"opt_namespaceUri\",\"opt_preferActiveX\",\"Error\",\"document\",\"implementation\",\"doc\",\"createMsXmlDocument_\",\"appendChild\",\"createNode\",\"NodeType\",\"ELEMENT\",\"loadXml\",\"goog.dom.xml.loadXml\",\"DOMParser\",\"safe\",\"parseFromString\",\"html\",\"legacyconversions\",\"safeHtmlFromString\",\"loadXML\",\"serialize\",\"goog.dom.xml.serialize\",\"text\",\"XMLSerializer\",\"serializeToString\",\"selectSingleNode\",\"goog.dom.xml.selectSingleNode\",\"node\",\"path\",\"getOwnerDocument\",\"setProperty\",\"hasFeature\",\"resolver\",\"createNSResolver\",\"documentElement\",\"result\",\"evaluate\",\"XPathResult\",\"FIRST_ORDERED_NODE_TYPE\",\"singleNodeValue\",\"selectNodes\",\"goog.dom.xml.selectNodes\",\"nodes\",\"ORDERED_NODE_SNAPSHOT_TYPE\",\"results\",\"count\",\"snapshotLength\",\"i\",\"push\",\"snapshotItem\",\"setAttributes\",\"goog.dom.xml.setAttributes\",\"element\",\"attributes\",\"key\",\"hasOwnProperty\",\"setAttribute\",\"goog.dom.xml.createMsXmlDocument_\",\"resolveExternals\",\"validateOnParse\"]\n}\n"]