{"version":3,"sources":["gallery.cljs"],"mappings":";AAMA,cAAA,dAAMA,oCAAKC;AAAX,AACE,OAAgBC,uBAAYD;;AAE9B,0BAAA,1BAAME,4DAAiBC;AAAvB,AACE,IAAMC,SAAO,KAAAC,yBAAA;AAAb,AACE,IAAAC,mBAAA,AAAAC,cAA8BJ;IAA9BK,qBAAA;IAAAC,qBAAA;IAAAC,iBAAA;;AAAA,AAAA,GAAA,AAAA,CAAAA,iBAAAD;AAAA,IAAAE,mBAAA,AAAAH,wDAAAE;IAAAC,uBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,qBAAA,9EAAgBY;mBAAhB,AAAAV,4CAAAF,qBAAA,hFAAqBa;AAArB,AAAA,AACE,GAAI,6CAAA,7CAACC,kDAAOD;oBACN,AAACE,aAAMH,bACP,AACA,pBACA,AAACI;;AACL,AAASvB,cAAO,CAAA,gFAAA,+DAAA,3EAA6BmB,6DAAUC;;;AAN3D;AAAA,eAAAlB;eAAAE;eAAAC;eAAA,CAAAC,iBAAA;;;;;;;AAAA,IAAAI,2BAAA,AAAAP,cAAAD;AAAA,AAAA,GAAAQ;AAAA,AAAA,IAAAR,uBAAAQ;AAAA,AAAA,GAAA,AAAAC,6BAAAT;AAAA,IAAAU,wBAAA,AAAAC,sBAAAX;AAAA,AAAA,eAAA,AAAAY,qBAAAZ;eAAAU;eAAA,AAAAG,gBAAAH;eAAA;;;;;;;AAAA,IAAAI,mBAAA,AAAAC,gBAAAf;IAAAc,uBAAA,AAAAR,4BAAAQ;iBAAA,AAAAP,4CAAAO,qBAAA,9EAAgBG;mBAAhB,AAAAV,4CAAAO,qBAAA,hFAAqBI;AAArB,AAAA,AACE,GAAI,6CAAA,7CAACC,kDAAOD;oBACN,AAACE,aAAMH,bACP,AACA,pBACA,AAACI;;AACL,AAASvB,cAAO,CAAA,gFAAA,+DAAA,3EAA6BmB,6DAAUC;;;AAN3D;AAAA,eAAA,AAAAF,eAAAhB;eAAA;eAAA;eAAA;;;;;;;;AAAA;;;;;AAOA,IAAMsB,YAAU,CAAA,sEAAA,nBAAY,AAAWxB;AAAvC,AACE,oBAAI,AAACyB,oBAAUD;AACb,OAACE,oBAAQ,aAAA,bAACJ,sBAAeE;;AAD3B;;;AAGN,wBAAA,xBAAMG;AAAN,AACE,2BAEK,4CAAA,WAAAE,vDAACC,pBACDL;AADA,AAAM,OAAAI;gBAFN,YAAA,ZAAClC,bACDiC,AACA;;AAGP,uBAAA,vBAAMG,sDAAcC;AAApB,AACE,IAAAC,qBAAkB,AAACN;AAAnB,AAAA,oBAAAM;AAAA,eAAAA,XAASC;AAAT,AACE,2DAAA,4DAAA,2CAAA,wDAAA,2CAAA,yEAAA,vUAACC,sTAAgCD,4EACPpC;;AAC1B,aAAA,NAACsC;;;AAEL,eAAA,fAAeC;AAAf,AACE,uFAAA,hFAACC,yDAAQ,aAAA,bAAChB,8EAAuBS","names":["gallery/sel","selectors","js/document","gallery/handle-response","response","errors","js/goog.string.StringBuffer","seq__20039","cljs.core/seq","chunk__20040","count__20041","i__20042","map__20045","cljs.core/--destructure-map","cljs.core.get","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","map__20046","cljs.core/first","cljs.core/next","name","status","cljs.core._EQ_","domina/by-id","goog.dom/removeNode","error-str","cljs.core/not-empty","domina/append!","gallery/find-selected","domina/nodes","p1__20047#","cljs.core.map","gallery/deleteImages","_","temp__5802__auto__","selected","ajax.core.POST","js/alert","gallery/init","domina.events.listen_BANG_"],"sourcesContent":["(ns gallery\n  (:require [goog.dom :as dom]\n            [domina :refer [by-id nodes append!]]\n            [domina.events :refer [listen!]]\n            [ajax.core :refer [POST]]))\n\n(defn sel [selectors]\n  (.querySelector js/document selectors))\n\n(defn handle-response [response]\n  (let [errors (goog.string.StringBuffer. \"\")]\n    (doseq [{:keys [name status]} response]\n      (if (= \"ok\" status)\n        (-> (by-id name)\n            (.-parentNode)\n            (.-parentNode)\n            (dom/removeNode))\n        (.append errors (str \"<li>failed to remove \" name \": \" status \"</li>\"))))\n    (let [error-str (str \"<ul>\" (.toString errors) \"</ul>\")]\n      (if (not-empty error-str)\n        (append! (by-id \"error\") error-str)))))\n\n(defn find-selected []\n  (->> (sel \"input:checked\")\n       nodes\n       (map #(.-name %))\n       not-empty))\n\n(defn deleteImages [_]\n  (if-let [selected (find-selected)]\n    (POST \"/delete\" {:params {:names selected}\n                     :handler handle-response})\n    (js/alert \"no images selected\")))\n\n(defn ^:export init []\n  (listen! (by-id \"delete\") :click deleteImages))\n"]}